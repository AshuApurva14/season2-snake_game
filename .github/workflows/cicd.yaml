name: CICD workflow for Snake Game application


on:
  workflow_dispatch:

  push:
    branches:
      - main


permissions:
  contents: read

jobs:
  lint:
    runs-on: ['self-hosted', 'Linux', 'X64']



    steps:
   
        - name: Checkout
          uses: actions/checkout@v5.0.0
    

        - name: Setup Python
          uses: actions/setup-python@v6.0.0
          with:
            python-version: '3.13'
            cache: 'pip'

        - name: Install dependencies
          run: |
            
            pip install -r requirements.txt
    

        - name: ruff-action 
          uses: astral-sh/ruff-action@v3.5.1

        - name: fix any linting issue
          run : ruff check --fix

        - name: Fix any format issue
          run: ruff format



  # code_analysis:
  #   runs-on: ['self-hosted', 'Linux', 'X64']
  #   needs: lint

  #   env:
  #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  #   steps:

  #     - name: Setup Python
  #       uses: actions/setup-python@v6.0.0
  #       with:
  #           python-version: '3.13'
  #           cache: 'pip'

  #     - name: Code Coverage by SonarQube
  #       run: |
          

  #         echo " Analysis of code starts"
  #         pip install pysonar
          
  #         echo "Set Heap memory"

  #         export SONAR_SCANNER_JAVA_OPTS="-Xmx512m"

  #         pysonar -Dsonar.organization=ashuapurva14 -Dsonar.projectKey=AshuApurva14_season2-snake_game  -Dsonar.sources="." -Dsonar.token=${{ env.SONAR_TOKEN }}
     
  #         echo "Code is analysed successfully!"
    

  secret_scanning:
       
    name: gitleaks
    runs-on: ['self-hosted', 'Linux', 'X64']
    needs: lint


    steps:
        - name: Checkout repository
          uses: actions/checkout@v4
          with:
              fetch-depth: 0

        - name: Scan leaks in code repo
          uses: gitleaks/gitleaks-action@v2
          env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  
  test:
    runs-on: ['self-hosted', 'Linux', 'X64']
    needs: secret_scanning
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5.0.0
      
      - name: Setup Python
        uses: actions/setup-python@v6.0.0
        with:
          python-version: '3.13'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          
      - name: Run tests
        run: pytest --cov=. --cov-report=xml



  docker_build_and_push:
    runs-on: ['self-hosted', 'Linux', 'X64']
    needs: test
      

    env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        REGISTRY: "docker.io"
        IMG_NAME: "aapurva/python-apps"


    outputs:
        image_tag: ${{ steps.set_output.outputs.image_tag }}
      

    steps:
        - name: Checkout Repository
          uses: actions/checkout@v4.2.2
          with:
            fetch-depth: 0

        - name: Docker Login
          id: docker-login
          uses: docker/login-action@v3
          with:
            username: ${{ env.DOCKER_HUB_USERNAME }}
            password: ${{ env.DOCKER_HUB_TOKEN }}

      
        - name: Docker Setup Buildx
          uses: docker/setup-buildx-action@v3.11.1


        - name: Extract metadata for Docker
          id: meta
          uses: docker/metadata-action@v5
          with:
            images: ${{ env.IMG_NAME }}
            tags: |
              type=sha,format=long
              type=ref,event=branch
              latest


        - name: Build Docker image
          uses: docker/build-push-action@v5
          with:
            context: .
            push: false
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
            load: true
          
      
        - name: Run Trivy vulnerability scanner
          uses: aquasecurity/trivy-action@master
          with:
            image-ref: ${{ env.REGISTRY }}/${{ env.IMG_NAME }}:sha-${{ github.sha }}
            format: 'table'
            exit-code: '1'
            ignore-unfixed: true
            vuln-type: 'os,library'
            severity: 'CRITICAL,HIGH'
        
        - name: Push Docker image
          uses: docker/build-push-action@v5
          with:
            context: .
            push: true
            tags: ${{ steps.meta.outputs.tags }}
            labels: ${{ steps.meta.outputs.labels }}
      
        - name: Set image tag output
          id: set_output
          run: echo "image_tag=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT



  
  deploy_app:
    runs-on: ['self-hosted', 'Linux', 'X64']
    needs: docker_build_and_push
     
    env:
        DOCKER_HUB_USERNAME: ${{ secrets.DOCKER_HUB_USERNAME }}
        DOCKER_HUB_TOKEN: ${{ secrets.DOCKER_HUB_TOKEN }}
        



    steps:

        - name: Checkout Repository
          uses: actions/checkout@v4.2.2


        - name: Docker Login
          id: docker-login
          uses: docker/login-action@v3
          with:
            username: ${{ env.DOCKER_HUB_USERNAME }}
            password: ${{ env.DOCKER_HUB_TOKEN }}

        
        - name: Docker Setup Buildx
          uses: docker/setup-buildx-action@v3.11.1


        - name: Set image tag for deployment
          id: deployment_status
          env:
            IMG_TAG: sha-${{ github.sha }}
            DOCKER_REGISTRY: ${{ env.DOCKER_HUB_USERNAME }}/python-apps

          run: |

            echo "Remove already running container"

            docker rm -f $(docker ps -l -q)

            sleep 2

            docker system prune -a -f
            

            echo "New tag is set for deployment: ${{ env.IMG_TAG }}"


            echo "Deploy the application"
            
            docker run -dp 80:5000 --name python-app ${{ env.DOCKER_REGISTRY }}:${{ env.IMG_TAG }} 

        
         # Step 4: Test app is running
        - name: Curl health endpoint
          run: |
            sleep 5
            curl http://localhost:80/ || exit 1


        - name: Send deployment status email
          uses: dawidd6/action-send-mail@v3
          with:
              server_address: smtp.gmail.com
              server_port: 465
              username: ${{ secrets.EMAIL_USERNAME }}
              password: ${{ secrets.EMAIL_PASSWORD }}
              subject: "ðŸš€ Deployment Status: ${{ steps.deployment_status.conclusion }}"
              to: "devopssre5@gmail.com"
              from: GitHub Actions
              body: |
                Hello,
                
                Deployment for *${{ github.repository }}* on commit ${{ github.sha }} has finished.
                Status: **${{ job.status }}**

                Application is running successfully!.

                Triggered by: ${{ github.actor }}
